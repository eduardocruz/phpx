#!/usr/bin/env php
<?php

declare(strict_types=1);

// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Locate Composer's autoloader
$autoloadPaths = [
    // Local development - package itself
    __DIR__ . '/../vendor/autoload.php',
    
    // Global installation through Composer
    __DIR__ . '/../../../autoload.php',
];

$loaded = false;
foreach ($autoloadPaths as $file) {
    if (file_exists($file)) {
        require $file;
        $loaded = true;
        break;
    }
}

if (!$loaded) {
    fwrite(STDERR, "Error: Unable to find Composer's autoloader. Please run 'composer install' first.\n");
    exit(1);
}

use PHPX\Console\Application;
use PHPX\Package\PackageManager;
use PHPX\Package\ExecutionEnvironment;
use PHPX\Console\Command\ListPharsCommand;
use PHPX\Console\Command\PharVersionsCommand;

// Create the application
$application = new Application();
$application->add(new ListPharsCommand());
$application->add(new PharVersionsCommand());

// If no arguments or first argument starts with -, use Symfony Console
if (count($argv) === 1 || $argv[1][0] === '-' || $argv[1] === 'list' || $argv[1] === 'list-phars' || $argv[1] === 'help') {
    $application->run();
    exit(0);
}

// Otherwise, treat as direct package execution
array_shift($argv); // Skip the script name
$packageSpec = array_shift($argv);
$verbose = in_array('-v', $argv) || in_array('--verbose', $argv);

// Remove verbose flags from args if present
$args = array_filter($argv, function($arg) {
    return $arg !== '-v' && $arg !== '--verbose';
});

try {
    if ($verbose) {
        echo "Resolving package: $packageSpec\n";
    }
    
    $packageManager = new PackageManager($verbose);
    $package = $packageManager->resolvePackage($packageSpec);
    
    if ($verbose) {
        echo "Package resolved to: " . $package->getPath() . "\n";
        echo "Executing package...\n";
    }
    
    $environment = new ExecutionEnvironment($package, $verbose);
    exit($environment->execute($args));
} catch (Exception $e) {
    fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
    if ($verbose) {
        fwrite(STDERR, "Stack trace:\n" . $e->getTraceAsString() . "\n");
    }
    exit(1);
}