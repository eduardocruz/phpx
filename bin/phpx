#!/usr/bin/env php
<?php

declare(strict_types=1);

// Enable error reporting for debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Locate Composer's autoloader
$autoloadPaths = [
    // Local development - package itself
    __DIR__ . '/../vendor/autoload.php',
    
    // Global installation through Composer
    __DIR__ . '/../../../autoload.php',
];

$loaded = false;
foreach ($autoloadPaths as $file) {
    if (file_exists($file)) {
        require $file;
        $loaded = true;
        break;
    }
}

if (!$loaded) {
    fwrite(STDERR, "Error: Unable to find Composer's autoloader. Please run 'composer install' first.\n");
    exit(1);
}

// If we're being run directly (not through the symfony console framework)
if (count($argv) > 1) {
    // Skip the script name
    array_shift($argv);
    
    $packageSpec = array_shift($argv);
    $verbose = in_array('-v', $argv) || in_array('--verbose', $argv);
    
    // Remove verbose flags from args if present
    $args = array_filter($argv, function($arg) {
        return $arg !== '-v' && $arg !== '--verbose';
    });
    
    try {
        if ($verbose) {
            echo "Resolving package: $packageSpec\n";
        }
        
        $packageManager = new PHPX\Package\PackageManager();
        $package = $packageManager->resolvePackage($packageSpec);
        
        if ($verbose) {
            echo "Package resolved to: " . $package->getPath() . "\n";
            echo "Executing package...\n";
        }
        
        $environment = new PHPX\Package\ExecutionEnvironment($package);
        exit($environment->execute($args));
    } catch (Exception $e) {
        fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
        if ($verbose) {
            fwrite(STDERR, "Stack trace:\n" . $e->getTraceAsString() . "\n");
        }
        exit(1);
    }
}

// Otherwise, use the Symfony Console application
use PHPX\Console\Application;
$application = new Application();
$application->run();